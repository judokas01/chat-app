// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  userName          String              @unique
  password          String
  createdAt         DateTime            @default(now())
  userConversations UsersConversation[]
  messages          Message[]
  userRenewToken    UserRenewToken?
}

model UserRenewToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  isValid   Boolean  @default(true)
}

model UsersConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  customName     String?
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId

  @@unique([userId, conversationId])
}

model Conversation {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String?
  createdAt          DateTime            @default(now())
  lastMessageAt      DateTime?
  messages           Message[]
  usersConversation UsersConversation[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  text           String
  createdAt      DateTime     @default(now())
  isRemoved      Boolean      @default(false)
  authorId       String       @db.ObjectId
  author         User         @relation(fields: [authorId], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
